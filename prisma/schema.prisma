// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                String              @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  email             String              @unique
  createdAt         DateTime            @default(now())
  emailVerified     DateTime?           @map("verifiedAt")
  sessions          Session[]
  image             String
  array             String[]            @default([])
  plan              String?             @default("")
  Account           Account[]
  AiReview          AiReview[]
  AiFacebookReview  AiFacebookReview[]
  AIInstagramReview AIInstagramReview[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime @map("expiresAt")
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime @map("expiresAt")

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model AiReview {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  link       String
  aiResponse String
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  image      String?  @default("")
  title      String?  @default("")
  address    String?  @default("")

  @@map("ai_reviews")
}

model AiFacebookReview {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postId     String
  aiResponse String
  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id])

  @@map("ai_facebook_reviews")
}

model AIInstagramReview {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  postId     String
  aiResponse String
  userId     String?  @db.ObjectId
  user       User?    @relation(fields: [userId], references: [id])
}
